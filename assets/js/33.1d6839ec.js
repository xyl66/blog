(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{379:function(e,_,v){"use strict";v.r(_);var t=v(42),o=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"tree-shaking"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" Tree-shaking")]),e._v(" "),v("h2",{attrs:{id:"tree-shaking的本质"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking的本质"}},[e._v("#")]),e._v(" Tree-shaking的本质")]),e._v(" "),v("p",[e._v("tree-shaking的本质是消除无用的js代码。和传统的dead code elimination（DCE）区别为传统DCE消除不可能执行的代码，tree-shaking更关注消除没有用到的代码。")]),e._v(" "),v("p",[e._v("通过ES Module的特性可以进行静态分析的特点，在编译时进行静态分析导入导出关系，识别出无用代码进行剔除\n"),v("code",[e._v("ES Module特性")])]),e._v(" "),v("ul",[v("li",[e._v("import只能作为顶层语句出现")]),e._v(" "),v("li",[e._v("import的模块名只能是字符串常量")]),e._v(" "),v("li",[e._v("import不可变的")])]),e._v(" "),v("h2",{attrs:{id:"webpack中tree-shaking流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack中tree-shaking流程"}},[e._v("#")]),e._v(" webpack中Tree-shaking流程")]),e._v(" "),v("p",[e._v("启动 Tree Shaking 功能必须同时满足三个条件")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用 ESM 规范编写模块代码")])]),e._v(" "),v("li",[v("p",[e._v("配置 optimization.usedExports 为 true，启动标记功能")])]),e._v(" "),v("li",[v("p",[e._v("启动代码优化功能，可以通过如下方式实现：")]),e._v(" "),v("ul",[v("li",[e._v("配置 mode = production")]),e._v(" "),v("li",[e._v("配置 optimization.minimize = true")]),e._v(" "),v("li",[e._v("提供 optimization.minimizer 数组")])])])]),e._v(" "),v("h3",{attrs:{id:"整体流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#整体流程"}},[e._v("#")]),e._v(" 整体流程")]),e._v(" "),v("ol",[v("li",[e._v("收集模块导出\n1.1 将模块的所有 ESM 导出语句转换为 "),v("code",[e._v("Dependency")]),e._v("对象，并记录到 "),v("code",[e._v("module")]),e._v(" 对象的 "),v("code",[e._v("dependencies")]),e._v(" 集合\n1.2 触发"),v("code",[e._v("finishModules")]),e._v("钩子，执行 "),v("code",[e._v("FlagDependencyExportsPlugin")]),e._v(" 插件回调。从 "),v("code",[e._v("entry")]),e._v(" 开始读取 "),v("code",[e._v("ModuleGraph")]),e._v(" 中存储的模块信息，遍历所有 "),v("code",[e._v("module")]),e._v(" 对象。遍历 "),v("code",[e._v("module")]),e._v(" 对象的 "),v("code",[e._v("dependencies")]),e._v(" 数组。将其转换为 "),v("code",[e._v("ExportInfo")]),e._v(" 对象并记录到 "),v("code",[e._v("ModuleGraph")]),e._v(" 体系中")]),e._v(" "),v("li",[e._v("标记模块导出\n2.1 出发 "),v("code",[e._v("optimizeDependencies")]),e._v(" 钩子，执行 "),v("code",[e._v("FlagDependencyUsagePlugin")]),e._v(" 。从 "),v("code",[e._v("entry")]),e._v(" 开始逐步遍历 "),v("code",[e._v("ModuleGraph")]),e._v(" 存储的所有 "),v("code",[e._v("module")]),e._v(" 对象\n2.2 遍历 "),v("code",[e._v("module")]),e._v(" 对象对应的 "),v("code",[e._v("exportInfo")]),e._v(" 数组\n2.3 "),v("code",[e._v("exportInfo")]),e._v(" 对象执行 "),v("code",[e._v("compilation.getDependencyReferencedExports")]),e._v(" 方法，确定其对应的 "),v("code",[e._v("dependency")]),e._v(" 对象有否被其它模块使用\n2.4 被使用的导出值，调用 "),v("code",[e._v("exportInfo.setUsedConditionally")]),e._v(" 方法将其标记为已被使用\n2.5 "),v("code",[e._v("exportInfo._usedInRuntime")]),e._v(" 属性，记录该导出被如何使用")]),e._v(" "),v("li",[e._v("生成代码\n"),v("code",[e._v("Webpack")]),e._v(" 根据 "),v("code",[e._v("ModuleGraph")]),e._v(" 体系中记录的导出值使用情况生成不同的代码")]),e._v(" "),v("li",[e._v("删除无用代码\n由 "),v("code",[e._v("Terser")]),e._v("、"),v("code",[e._v("UglifyJS")]),e._v(" 等工具“摇”掉这部分无效代码")])]),e._v(" "),v("h2",{attrs:{id:"rollup中tree-shaking流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rollup中tree-shaking流程"}},[e._v("#")]),e._v(" Rollup中Tree-shaking流程")]),e._v(" "),v("p",[e._v("无需额外配置，只要代码符合"),v("code",[e._v("ES Module")]),e._v("规范，即可实现tree-shaking。")]),e._v(" "),v("ul",[v("li",[e._v("基于ES6模块的静态分析")]),e._v(" "),v("li",[e._v("分析程序流，判断哪些变量被使用、引用")])]),e._v(" "),v("p",[e._v("分析程序流\n基于作用域，在AST时对韩素或全局对象进行对象记录，然后在形成的整个作用域链对象中进行匹配import的导入并标识起来，最后打包匹配的代码，删除未匹配的")]),e._v(" "),v("h3",{attrs:{id:"整体流程-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#整体流程-2"}},[e._v("#")]),e._v(" 整体流程")]),e._v(" "),v("p",[e._v("从入口文件出发，找出所有读取的变量，找这些变量在哪里定义的，将定义语句包含进来，无关代码抛弃。")]),e._v(" "),v("h2",{attrs:{id:"副作用以及babel"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#副作用以及babel"}},[e._v("#")]),e._v(" 副作用以及Babel")]),e._v(" "),v("p",[e._v("一个函数会、或者可能会对函数外部变量产生影响的行为，会产生副作用。\n"),v("code",[e._v("Babel")]),e._v(" 将 "),v("code",[e._v("ES6/ES7")]),e._v(" 代码进行转换时，可能会使原本没有副作用的代码，产生副作用,进而无法进行 "),v("code",[e._v("tree shaking")]),e._v("。")])])}),[],!1,null,null,null);_.default=o.exports}}]);